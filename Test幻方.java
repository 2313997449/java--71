package test;
/*
算法
1、创建全局的一个数组和一个int型变量分部用来存储4个边角数字和1个中央数字。设置标记数字d=0；
2、创建全局的一个数组和一个int型变量分部用来存储4个边角数字和1个中央数字。设置标记数字d=0；
3、在for循环的最内层计算三个数字之和，如果等于15，则标记数字d自增1，表示已经找到一组和为15的数字组合。
4、在循环的最外层，也就是第一个数字不变，后面两个数字取任意不重复值取完之后，利用if语句进行判断，如果d的值自增到了6，则说明找到了边角数字，存入数组；如果d的值自增到了8，则说明得到了中央数字，需要赋值存储。如果d的值自增到了4，说明此时是每一行中间的数字，但是这个数字我们不需要存储。
5、每次d分别自增到4、6、8时，说明此时内部的两层循环已经结束，第一个数字即将自增1再重新开始内部的两层循环，此时需要将d的值重新归0，以便计算不同的首位数字的到和为15的数字组合个数。
6、当得到4个边角数字和1个中央数字之和，再计算每一行中间的数字就特别简单了，只需要用15减去两个就行。
7、所有数字就得到以后，就可以展示出来。

 */
public class Test幻方 {
    public static void main(String[] args) {

        //创建全局的一个数组和一个int型变量分部用来存储4个边角数字和1个中央数字。设置标记数字d=0；
        //创建全局的一个数组和一个int型变量分部用来存储4个边角数字和1个中央数字。设置标记数字d=0
        int d = 0;
        int i = 0;

        int[] corner = new int[4];
        int center = 0;
        //在for循环的最内层计算三个数字之和，如果等于15，则标记数字d自增1，表示已经找到一组和为15的数字组合。
        for (int a = 1; a < 10; a++) {
            for (int b = 1; b < 10; b++) {
                if (a != b) {
                    for (int c = 1; c < 10; c++) {
                        if (a != c && b != c) {
                            int x = a + b + c;
                            if (x == 15) {
                                d++;
                            }
                        }
                    }
                }
            }
            //在循环的最外层，也就是第一个数字不变，后面两个数字取任意不重复值取完之后，
            // 利用if语句进行判断，如果d的值自增到了6，则说明找到了边角数字，存入数组；
            // 如果d的值自增到了8，则说明得到了中央数字，需要赋值存储。如果d的值自增到了4
            if (d == 6) {
                System.out.println("得到的边角数字是" + a);
                corner[i] = a;
                i++;
                d = 0;
            }

            if (d == 4) {
                d = 0;
            }
            if (d == 8) {
                System.out.println("得到的中央数字是" + a);
                center = a;
                d = 0;
            }
        }
        //每次d分别自增到4、6、8时，说明此时内部的两层循环已经结束，第一个数字即将自增1再重新开始内部的两层循环，
        // 此时需要将d的值重新归0，以便计算不同的首位数字的到和为15的数字组合个数。
        int m1 = 15 - corner[0] - corner[1];

        int m2 = 15 - corner[2] - corner[3];

        int m3 = 15 - corner[0] - corner[2];

        int m4 = 15 - corner[1] - corner[3];
        System.out.println("九宫图如下");
        System.out.println(corner[0]+" "+m1+" "+corner[1]);
        System.out.println(m3+" "+center+" "+m4);
        System.out.println(corner[2]+" "+m2+" "+corner[3]);

    }


}
